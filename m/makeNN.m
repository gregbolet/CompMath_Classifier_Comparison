function [NNfnctHandle] = makeNN(inputMat, targetMat, hiddenLayerSize, fnctFileName)
    % Solve a Pattern Recognition Problem with a Neural Network
    % Script generated by Neural Pattern Recognition app
    % Created 05-Dec-2019 08:47:41
    %
    % This script assumes these variables are defined:
    %
    %   fontGenInputMat - input data.
    %   fontGenTargetMat - target data.

    % Check if the input function name already exists
    % This means that the NN was already generated
    % So let's skip making the NN
    if isfile(strcat(fnctFileName, '.m'))
       NNfnctHandle = str2func(fnctFileName);
       return;
    end
    
    x = inputMat;
    t = targetMat;

    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems.
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

    % Create a Pattern Recognition Network
    %hiddenLayerSize = 28;
    net = patternnet(hiddenLayerSize, trainFcn);

    % Choose Input and Output Pre/Post-Processing Functions
    % For a list of all processing functions type: help nnprocess
    net.input.processFcns = {'removeconstantrows','mapminmax'};

    % Setup Division of Data for Training, Validation, Testing
    % For a list of all data division functions type: help nndivision
    net.divideFcn = 'dividerand';  % Divide data randomly
    net.divideMode = 'sample';  % Divide up every sample
    net.divideParam.trainRatio = 90/100;
    net.divideParam.valRatio   = 10/100;
    net.divideParam.testRatio  =  0/100;

    % Choose a Performance Function
    % For a list of all performance functions type: help nnperformance
    net.performFcn = 'crossentropy';  % Cross-Entropy

    % Choose Plot Functions
    % For a list of all plot functions type: help nnplot
    net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
                    'plotconfusion', 'plotroc'};

    % Train the Network
    [net,tr] = train(net,x,t);

    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y)
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);

    % Recalculate Training, Validation and Test Performance
    trainTargets = t .* tr.trainMask{1};
    valTargets = t .* tr.valMask{1};
    testTargets = t .* tr.testMask{1};
    trainPerformance = perform(net,trainTargets,y)
    valPerformance = perform(net,valTargets,y)
    %testPerformance = perform(net,testTargets,y)

    % View the Network
    %view(net)

    % Plots
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, ploterrhist(e)
    %Plot all the confusion matrices
    %%a = figure, plotconfusion(trainTargets, y, 'Training')
    %%b = figure, plotconfusion(valTargets,   y, 'Validation')
    %c = figure, plotconfusion(testTargets,  y, 'Testing')
    %%d = figure, plotconfusion(t,            y, 'All')
    
    %figure, plotroc(t,y)
    %%set(findobj(a,'type','text'),'fontsize',8)
    %%set(findobj(b,'type','text'),'fontsize',8)
    %set(findobj(c,'type','text'),'fontsize',8)
    %%set(findobj(d,'type','text'),'fontsize',8)

    %figure, plotroc(t,y)

    % Deployment
    % Change the (false) values to (true) to enable the following code blocks.
    % See the help for each generation function for more information.
    if (true)
        % Generate MATLAB function for neural network for application
        % deployment in MATLAB scripts or with MATLAB Compiler and Builder
        % tools, or simply to examine the calculations your trained neural
        % network performs.
        genFunction(net, fnctFileName);
        NNfnctHandle = str2func(fnctFileName);
        %y = myNeuralNetworkFunction(x);
    end
    if (false)
        % Generate a matrix-only MATLAB function for neural network code
        % generation with MATLAB Coder tools.
        genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
        y = myNeuralNetworkFunction(x);
    end
    if (false)
        % Generate a Simulink diagram for simulation or deployment with.
        % Simulink Coder tools.
        gensim(net);
    end
end